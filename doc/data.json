{
    "project": {
        "name": "MSI App - Docs",
        "description": "MetricStream Mobile App - API documentation",
        "version": "0.2.0",
        "url": "http://www.metricstream.com",
        "logo": "/msi-app/img/metricstream/metricstream-logo-black.png"
    },
    "files": {
        "lib\\iscroll\\iscroll.js": {
            "name": "lib\\iscroll\\iscroll.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib\\iscroll\\jquery.mobile.iscrollview.js": {
            "name": "lib\\iscroll\\jquery.mobile.iscrollview.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib\\jquery\\jquery-1.7.2.js": {
            "name": "lib\\jquery\\jquery-1.7.2.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib\\jquery\\jquery-1.8.0.js": {
            "name": "lib\\jquery\\jquery-1.8.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib\\jquery\\jquery-1.8.1.js": {
            "name": "lib\\jquery\\jquery-1.8.1.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib\\jquery\\jquery-1.8.2.js": {
            "name": "lib\\jquery\\jquery-1.8.2.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib\\qunit\\qunit.js": {
            "name": "lib\\qunit\\qunit.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib\\requirejs\\addons\\domReady.js": {
            "name": "lib\\requirejs\\addons\\domReady.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib\\requirejs\\require.js": {
            "name": "lib\\requirejs\\require.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "module\\model\\setting\\SettingModel.js": {
            "name": "module\\model\\setting\\SettingModel.js",
            "modules": {},
            "classes": {
                "SettingModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "module\\model\\task\\TaskModel.js": {
            "name": "module\\model\\task\\TaskModel.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "module\\util\\communication\\Communication.js": {
            "name": "module\\util\\communication\\Communication.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "module\\util\\communication\\TaskComms.js": {
            "name": "module\\util\\communication\\TaskComms.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "module\\util\\communication\\TmplComms.js": {
            "name": "module\\util\\communication\\TmplComms.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "module\\util\\i18n\\i18n_en.js": {
            "name": "module\\util\\i18n\\i18n_en.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "module\\util\\lib\\iscroll\\Manager.js": {
            "name": "module\\util\\lib\\iscroll\\Manager.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "module\\util\\tmpl\\TemplateManager.js": {
            "name": "module\\util\\tmpl\\TemplateManager.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "module\\util\\Constants.js": {
            "name": "module\\util\\Constants.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "module\\util\\ErrorHandler.js": {
            "name": "module\\util\\ErrorHandler.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "module\\util\\Settings.js": {
            "name": "module\\util\\Settings.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "module\\util\\Storage.js": {
            "name": "module\\util\\Storage.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "module\\viewmodel\\setting\\SettingsViewModel.js": {
            "name": "module\\viewmodel\\setting\\SettingsViewModel.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "module\\viewmodel\\task\\TaskViewModel.js": {
            "name": "module\\viewmodel\\task\\TaskViewModel.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "test\\model\\setting\\SettingModelTest.js": {
            "name": "test\\model\\setting\\SettingModelTest.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "test\\model\\task\\TaskModelTest.js": {
            "name": "test\\model\\task\\TaskModelTest.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "test\\viewmodel\\task\\TaskViewModelTest.js": {
            "name": "test\\viewmodel\\task\\TaskViewModelTest.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "test\\CoreTest.js": {
            "name": "test\\CoreTest.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "SettingModel": {
            "name": "SettingModel",
            "shortname": "SettingModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "module\\model\\setting\\SettingModel.js",
            "line": 1,
            "description": "The SettingModel holds the various settings configurable by the user in\nthe Settings screen.\n\nCurrently, the following settings are available:\n1. API URL\n2. Security credentials (which will be moved to another model in the future)\n\nThe SettingsModel is used by the\n{{#crossLink \"../../viewmodel/setting/SettingsViewModel\"}}{{/crossLink}}."
        }
    },
    "classitems": [
        {
            "file": "lib\\iscroll\\iscroll.js",
            "line": 713,
            "description": "Utilities",
            "class": "SettingModel"
        },
        {
            "file": "lib\\iscroll\\iscroll.js",
            "line": 869,
            "description": "Public methods",
            "class": "SettingModel"
        },
        {
            "file": "lib\\iscroll\\jquery.mobile.iscrollview.js",
            "line": 1,
            "description": "jslint directives. In case you hate yourself, and need that reinforced...\n\nYou will still get a few warnings that can't be turned off, or that I'm just\ntoo stubborn to \"fix\"\n\nsloppy, white: let me indent any way I damn please! I like to line things\n               up nice and purty.\n\nnomen: tolerate leading _ for variable names. Leading _ is a requirement for\n       JQuery Widget Factory private members",
            "class": "SettingModel"
        },
        {
            "file": "lib\\iscroll\\jquery.mobile.iscrollview.js",
            "line": 18,
            "description": "But instead, be kind to yourself, and use jshint.\n\nNote jshint nomen and white options are opposite of jslint\n\nYou can't specify an indent of you use white: false, otherwise it will\nstill complain",
            "class": "SettingModel"
        },
        {
            "file": "lib\\jquery\\jquery-1.7.2.js",
            "line": 4270,
            "description": "Utility function for retreiving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": "SettingModel"
        },
        {
            "file": "lib\\jquery\\jquery-1.8.0.js",
            "line": 4453,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": "SettingModel"
        },
        {
            "file": "lib\\jquery\\jquery-1.8.1.js",
            "line": 3949,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": "SettingModel"
        },
        {
            "file": "lib\\jquery\\jquery-1.8.2.js",
            "line": 3987,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": "SettingModel"
        },
        {
            "file": "lib\\qunit\\qunit.js",
            "line": 1,
            "description": "QUnit v1.6.0 - A JavaScript Unit Testing Framework\n\nhttp://docs.jquery.com/QUnit\n\nCopyright (c) 2012 John Resig, Jörn Zaefferer\nDual licensed under the MIT (MIT-LICENSE.txt)\nor GPL (GPL-LICENSE.txt) licenses.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\qunit\\qunit.js",
            "line": 1354,
            "description": "jsDump Copyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com |\nhttp://flesler.blogspot.com Licensed under BSD\n(http://www.opensource.org/licenses/bsd-license.php) Date: 5/15/2008",
            "projectdescription": "Advanced and extensible data dumping for Javascript.",
            "version": "1.0.0",
            "author": "Ariel Flesler",
            "link": "{http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html}",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\addons\\domReady.js",
            "line": 1,
            "license": "RequireJS domReady 2.0.0 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/requirejs/domReady for details",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\addons\\domReady.js",
            "line": 40,
            "description": "Sets the page as loaded.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\addons\\domReady.js",
            "line": 93,
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\addons\\domReady.js",
            "line": 95,
            "description": "Registers a callback for DOM ready. If DOM is already ready, the\ncallback is called immediately.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\addons\\domReady.js",
            "line": 111,
            "description": "Loader Plugin API method",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\addons\\domReady.js",
            "line": 122,
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 1,
            "license": "RequireJS 2.0.4 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/requirejs for details",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 48,
            "description": "Helper function for iterating over an array. If the func returns\na true value, it will break out of the loop.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 63,
            "description": "Helper function for iterating over an array backwards. If the func\nreturns a true value, it will break out of the loop.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 82,
            "description": "Cycles over properties in an object and calls a function for each\nproperty value. If the function returns a truthy value, then the\niteration is stopped.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 98,
            "description": "Simple function to mix in properties from source into target,\nbut only if target does not already have a property of the same name.\nThis is not robust in IE for transferring methods that match\nObject.prototype names, but the uses of mixin here seem unlikely to\ntrigger a problem related to that.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 183,
            "description": "Constructs an error with a pointer to an URL with more information.",
            "params": [
                {
                    "name": "id",
                    "description": "the error ID that maps to an ID on a web page.",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "human readable error.",
                    "type": "String"
                },
                {
                    "name": "err",
                    "description": "the original error, if there is one.",
                    "type": "Error",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Error"
            },
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 246,
            "description": "Trims the . and .. from an array of path segments.\nIt will keep a leading path segment if a .. will become\nthe first path segment, to help with module name lookups,\nwhich act like paths, but can be remapped. But the end result,\nall paths that use this function should look normalized.\nNOTE: this method MODIFIES the input array.",
            "params": [
                {
                    "name": "ary",
                    "description": "the array of path segments.",
                    "type": "Array"
                }
            ],
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 279,
            "description": "Given a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "params": [
                {
                    "name": "name",
                    "description": "the relative name",
                    "type": "String"
                },
                {
                    "name": "baseName",
                    "description": "a real name that the name arg is relative\nto.",
                    "type": "String"
                },
                {
                    "name": "applyMap",
                    "description": "apply the map config to the value. Should\nonly be done if this normalization is for a dependency ID.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "normalized name",
                "type": "String"
            },
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 399,
            "description": "Creates a module mapping that includes plugin prefix, module\nname, and path. If parentModuleMap is provided it will\nalso normalize the name via require.normalize()",
            "params": [
                {
                    "name": "name",
                    "description": "the module name",
                    "type": "String"
                },
                {
                    "name": "parentModuleMap",
                    "description": "parent module map\nfor the module name, used to resolve relative names.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "isNormalized:",
                    "description": "is the ID already normalized.\nThis is true if this call is done for a define() module ID.",
                    "type": "Boolean"
                },
                {
                    "name": "applyMap:",
                    "description": "apply the map config to the ID.\nShould only be true if this map is for a dependency.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 529,
            "description": "Internal method to transfer globalQueue items to this context's\ndefQueue.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 545,
            "description": "Helper function that creates a require function object to give to\nmodules that ask for it as a dependency. It needs to be specific\nper module because of the implication of path mappings that may\nneed to be relative to the module name.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 929,
            "description": "Checks is the module is ready to define itself, and if so,\ndefine it. If the silent argument is true, then it will just\ndefine, but not notify listeners, and not ask for a context-wide\ncheck of all loaded modules. That is useful for cycle breaking.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 1252,
            "description": "Given an event from a script node, get the requirejs info from it,\nand then removes the event listeners on the node.",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 1285,
            "description": "Set a configuration for the context.",
            "params": [
                {
                    "name": "cfg",
                    "description": "config object to integrate.",
                    "type": "Object"
                }
            ],
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 1493,
            "description": "Called to enable a module if it is still in the registry\nawaiting enablement. parent module is passed in for context,\nused by the optimizer.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 1505,
            "description": "Internal method used by environment adapters to complete a load event.\nA load event could be a script load or just a load pass from a synchronous\nload call.",
            "params": [
                {
                    "name": "moduleName",
                    "description": "the name of the module to potentially complete.",
                    "type": "String"
                }
            ],
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 1563,
            "description": "Converts a module name + .extension into an URL path.\n*Requires* the use of a module name. It does not support using\nplain URLs like nameToUrl.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 1581,
            "description": "Converts a module name to a file path. Supports cases where\nmoduleName may actually be just an URL.\nNote that it **does not** call normalize on the moduleName,\nit is assumed to have already been normalized. This is an\ninternal API, not a public one. Use toUrl for the public API.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 1651,
            "description": "Executes a module callack function. Broken out as a separate function\nsolely to allow the build system to sequence the files in the built\nlayer in the right sequence.",
            "access": "private",
            "tagname": "",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 1662,
            "description": "callback for script loads, used to check status of loading.",
            "params": [
                {
                    "name": "evt",
                    "description": "the event from the browser for the script\nthat was loaded.",
                    "type": "Event"
                }
            ],
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 1684,
            "description": "Callback for script errors.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 1696,
            "description": "Main entry point.\n\nIf the only argument to require is a string, then the module that\nis represented by that string is fetched for the appropriate context.\n\nIf the first argument is an array, then it will be treated as an array\nof dependency string names to fetch. An optional function callback can\nbe specified to execute when all of those dependencies are available.\n\nMake a local req variable to help Caja compliance (it assumes things\non a require that are not standardized), and to give a short\nname for minification/local scope use.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 1746,
            "description": "Support require.config() to make it easier to cooperate with other\nAMD loaders on globally agreed names.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 1754,
            "description": "Export require as a global, but only if it does not already exist.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 1789,
            "description": "Any errors that require explicitly generates will be passed to this\nfunction. Intercept/override it if you want custom error handling.",
            "params": [
                {
                    "name": "err",
                    "description": "the error object.",
                    "type": "Error"
                }
            ],
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 1798,
            "description": "Does the request to load a module for the browser case.\nMake this a separate function to allow other environments\nto override it.",
            "params": [
                {
                    "name": "context",
                    "description": "the require context to find state.",
                    "type": "Object"
                },
                {
                    "name": "moduleName",
                    "description": "the name of the module.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "the URL to the module.",
                    "type": "Object"
                }
            ],
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 1944,
            "description": "The function that handles definitions of modules. Differs from\nrequire() in that a string for the module should be the first argument,\nand the function to execute after dependencies are loaded should\nreturn a value to define the module corresponding to the first argument's\nname.",
            "class": "SettingModel"
        },
        {
            "file": "lib\\requirejs\\require.js",
            "line": 2017,
            "description": "Executes the text. Normally just uses eval, but can be modified\nto use a better, environment-specific call. Only used for transpiling\nloader plugins, not for plain JS modules.",
            "params": [
                {
                    "name": "text",
                    "description": "the text to execute/evaluate.",
                    "type": "String"
                }
            ],
            "class": "SettingModel"
        },
        {
            "file": "module\\model\\task\\TaskModel.js",
            "line": 1,
            "description": "TaskModel\nThe TaskModel module.",
            "class": ""
        },
        {
            "file": "module\\util\\communication\\Communication.js",
            "line": 1,
            "description": "Communication\nThe Communication module.",
            "class": ""
        },
        {
            "file": "module\\util\\communication\\TaskComms.js",
            "line": 1,
            "description": "TaskComms\nThe TaskComms module.",
            "class": ""
        },
        {
            "file": "module\\util\\communication\\TmplComms.js",
            "line": 1,
            "description": "TmplComms\nThe TmplComms module.",
            "class": ""
        },
        {
            "file": "module\\util\\i18n\\i18n_en.js",
            "line": 3,
            "description": "Internationalization strings.\nThis i18n module stores all the i18n strings.",
            "author": "See /humans.txt",
            "class": ""
        },
        {
            "file": "module\\util\\lib\\iscroll\\Manager.js",
            "line": 1,
            "description": "Manager\nThe Manager module for iscroll.",
            "class": ""
        },
        {
            "file": "module\\util\\tmpl\\TemplateManager.js",
            "line": 1,
            "description": "TemplateManager\nThe TemplateManager module.",
            "class": ""
        },
        {
            "file": "module\\util\\Constants.js",
            "line": 3,
            "description": "Constants\nThe Constants module stores global constants required in the application.",
            "author": "See /humans.txt",
            "class": ""
        },
        {
            "file": "module\\util\\ErrorHandler.js",
            "line": 3,
            "description": "ErrorHandler\nThe ErrorHandler module.",
            "author": "rishabhsrao",
            "class": ""
        },
        {
            "file": "module\\util\\Settings.js",
            "line": 1,
            "description": "Settings\nThe Settings module.",
            "class": ""
        },
        {
            "file": "module\\util\\Storage.js",
            "line": 3,
            "description": "Storage\nThe Storage module.",
            "author": "rishabhsrao",
            "class": ""
        },
        {
            "file": "module\\viewmodel\\setting\\SettingsViewModel.js",
            "line": 1,
            "description": "SettingsViewModel\nThe SettingsViewModel module.",
            "class": ""
        },
        {
            "file": "module\\viewmodel\\task\\TaskViewModel.js",
            "line": 1,
            "description": "TaskViewModel\nThe TaskViewModel module.",
            "class": ""
        },
        {
            "file": "test\\model\\setting\\SettingModelTest.js",
            "line": 1,
            "description": "SettingModelTest\nThe SettingModelTest module.",
            "class": ""
        },
        {
            "file": "test\\model\\task\\TaskModelTest.js",
            "line": 1,
            "description": "TaskModelTest\nThe TaskModelTest module.",
            "class": ""
        },
        {
            "file": "test\\viewmodel\\task\\TaskViewModelTest.js",
            "line": 1,
            "description": "TaskModelTest\nThe TaskModelTest module.",
            "class": ""
        },
        {
            "file": "test\\CoreTest.js",
            "line": 3,
            "description": "CoreTest\nThe CoreTest module.",
            "author": "rishabhsrao",
            "class": ""
        }
    ]
}